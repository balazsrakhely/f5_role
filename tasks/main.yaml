---
- name: Display input hosts
  debug:
    msg: "{{ f5_cred.f5_hosts.split(',') }}"
  
- name: Validate f5 credential fields
  assert:
    that:
      - f5_cred.f5_user is defined
      - f5_cred.f5_password is defined
      - (f5_cred.f5_hosts | split(',') | length) == 2

- name: Validate vs required parameters
  assert:
    that:
      - vs_name is defined
      - vs_address is defined
      - vs_protocol is defined
      - vs_port is defined
      - vs_vlans is defined

- name: Device info
  bigip_device_info:
    gather_subset:
      - devices
    provider:
      server: "{{ f5_cred.f5_hosts.split(',') | first }}"
      user: "{{ f5_cred.f5_user }}"
      password: "{{ f5_cred.f5_password }}"
      server_port: "{{ provider_server_port }}"
      no_f5_teem: "{{ provider_omit_telemetry }}"
      transport: "{{ provider_transport }}"
      validate_certs: "{{ provider_validate_certs }}"
  register: _device_result

- name: Show registered results
  debug:
    msg: "{{ _device_result }}"

- name: Get active device
  ansible.builtin.set_fact:
    _active_device: "{{ _device_lookup_result.device }}"
    _active_device_address: "{{ _device_lookup_result.address }}"
  vars:
    _device_lookup_result: "{{ lookup('get_active_device', f5_cred.f5_hosts, _device_result.devices, wantlist=True) }}"

- name: Display active device
  debug:
    msg: "The active device is {{ _active_device_address }}"

- name: Convert pool health monitor to correct format
  ansible.builtin.set_fact:
    _pool_health_monitor: "{{ _monitor }}"
  vars:
    _tmp_monitor: "{{ pool_health_monitor | default('') }}"
    _monitor: "{{ _tmp_monitor.split(',') if _tmp_monitor | length > 0 else [] }}"

- name: Create pool
  bigip_pool:
    state: present
    name: "{{ vs_name }}_{{ vs_protocol }}{{ vs_port }}_pool"
    partition: "{{ partition }}"
    lb_method: "{{ lb_algo }}"
    slow_ramp_time: "{{ pool_slow_ramp_time }}"
    monitor_type: "{{ 'and_list' if _pool_health_monitor | length > 0 else omit }}"
    monitors: "{{ _pool_health_monitor }}"
    provider:
      server: "{{ _active_device_address }}"
      user: "{{ f5_cred.f5_user }}"
      password: "{{ f5_cred.f5_password }}"
      server_port: "{{ provider_server_port }}"
      no_f5_teem: "{{ provider_omit_telemetry }}"
      transport: "{{ provider_transport }}"
      validate_certs: "{{ provider_validate_certs }}"
  register: _pool_result

- name: Display created pool
  debug:
    msg: "{{ _pool_result }}"

- name: Create virtual server
  bigip_virtual_server:
    state: present
    partition: "{{ partition }}"
    name: "{{ vs_name }}_{{ vs_protocol }}{{ vs_port }}_vs"
    destination: "{{ vs_address }}"
    port: "{{ vs_port }}"
    ip_protocol: "{{ vs_protocol }}"
    enabled_vlans: "{{ (vs_vlans | split(',')) }}"
    snat: Automap
    pool: "{{ _pool_result.name }}"
    provider:
      server: "{{ _active_device_address }}"
      user: "{{ f5_cred.f5_user }}"
      password: "{{ f5_cred.f5_password }}"
      server_port: "{{ provider_server_port }}"
      no_f5_teem: "{{ provider_omit_telemetry }}"
      transport: "{{ provider_transport }}"
      validate_certs: "{{ provider_validate_certs }}"
  register: _vs_result

- name: Display created pool
  debug:
    msg: "{{ _vs_result }}"
